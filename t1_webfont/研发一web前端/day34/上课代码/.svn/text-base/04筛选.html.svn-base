<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title></title>
		<script src="js/jquery-3.4.1.js" type="text/javascript" charset="utf-8"></script>
		<script type="text/javascript">
			$(function(){
				//获取第N个元素
				$(".list li").eq(2).css("color","red");
				
				//检查当前的元素是否含有某个特定的类，如果有，则返回true。
				console.log($(".list").hasClass("list"));
				
				//删除与指定表达式匹配的元素
				$(".list li").not($(".list li").eq(2)).css("font-size","30px");
				
				//所有子元素的元素集合。
				$(".box").children("a").css("color","red");
				
				//搜索所有与指定表达式匹配的元素。这个函数是找出正在处理的元素的后代元素的好方法。
				$(".box").find("a").css("background","green");
				
				//取得一个包含匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。
//				$(".list li").eq(2).next("li").css("background","#0086B3");
			
				//查找当前元素之后所有的同辈元素。
				$(".list li").eq(2).nextAll("li").css("background","#0086B3");
				
				//取得一个包含着所有匹配元素的唯一父元素的元素集合。
				console.log($(".a1").parent());
				
				//取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。
				console.log($(".a1").parents());
				
				//所有唯一同辈元素的元素集合
				console.log($(".oli3").siblings(".oli1"));
				
				$(".list li").click(function(){
					console.log($(this).index());
				})
				var arr=[
					{
						"name":"zhangsan",
						"age":18
					},
					{
						"name":"zhangsan2",
						"age":108
					},
					{
						"name":"zhangsan3",
						"age":118
					}
				]
				//以每一个匹配的元素作为上下文来执行一个函数。
				$(arr).each(function(idx,item){
					console.log(item.name);
				})

			})
		</script>
	</head>
	<body>
		<ul class="list">
			<li class="oli1">liebiao</li>
			<li>liebiao</li>
			<li class="oli3">liebiao</li>
			<li>liebiao</li>
			<li>liebiao</li>
		</ul>
		<div class="box">
			<h3>
				hehe
				<a class="a1" href="#">百度</a>
			</h3>
			<a href="#">taobao</a>
		</div>
	</body>
</html>
